package project.cn.edu.tongji.sse.nowfitness.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import project.cn.edu.tongji.sse.nowfitness.model.UserInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_MODEL".
*/
public class UserInfoModelDao extends AbstractDao<UserInfoModel, Long> {

    public static final String TABLENAME = "USER_INFO_MODEL";

    /**
     * Properties of entity UserInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property PassWord = new Property(2, String.class, "passWord", false, "PASS_WORD");
        public final static Property Height = new Property(3, double.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(4, double.class, "weight", false, "WEIGHT");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(6, int.class, "age", false, "AGE");
        public final static Property PictureUrl = new Property(7, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property FollowingNum = new Property(8, int.class, "followingNum", false, "FOLLOWING_NUM");
        public final static Property FansNum = new Property(9, int.class, "fansNum", false, "FANS_NUM");
        public final static Property MomentsNum = new Property(10, int.class, "momentsNum", false, "MOMENTS_NUM");
        public final static Property DateCheckString = new Property(11, String.class, "dateCheckString", false, "DATE_CHECK_STRING");
    }


    public UserInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"PASS_WORD\" TEXT," + // 2: passWord
                "\"HEIGHT\" REAL NOT NULL ," + // 3: height
                "\"WEIGHT\" REAL NOT NULL ," + // 4: weight
                "\"SEX\" TEXT," + // 5: sex
                "\"AGE\" INTEGER NOT NULL ," + // 6: age
                "\"PICTURE_URL\" TEXT," + // 7: pictureUrl
                "\"FOLLOWING_NUM\" INTEGER NOT NULL ," + // 8: followingNum
                "\"FANS_NUM\" INTEGER NOT NULL ," + // 9: fansNum
                "\"MOMENTS_NUM\" INTEGER NOT NULL ," + // 10: momentsNum
                "\"DATE_CHECK_STRING\" TEXT);"); // 11: dateCheckString
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(3, passWord);
        }
        stmt.bindDouble(4, entity.getHeight());
        stmt.bindDouble(5, entity.getWeight());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
        stmt.bindLong(7, entity.getAge());
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(8, pictureUrl);
        }
        stmt.bindLong(9, entity.getFollowingNum());
        stmt.bindLong(10, entity.getFansNum());
        stmt.bindLong(11, entity.getMomentsNum());
 
        String dateCheckString = entity.getDateCheckString();
        if (dateCheckString != null) {
            stmt.bindString(12, dateCheckString);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(3, passWord);
        }
        stmt.bindDouble(4, entity.getHeight());
        stmt.bindDouble(5, entity.getWeight());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
        stmt.bindLong(7, entity.getAge());
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(8, pictureUrl);
        }
        stmt.bindLong(9, entity.getFollowingNum());
        stmt.bindLong(10, entity.getFansNum());
        stmt.bindLong(11, entity.getMomentsNum());
 
        String dateCheckString = entity.getDateCheckString();
        if (dateCheckString != null) {
            stmt.bindString(12, dateCheckString);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoModel readEntity(Cursor cursor, int offset) {
        UserInfoModel entity = new UserInfoModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // passWord
            cursor.getDouble(offset + 3), // height
            cursor.getDouble(offset + 4), // weight
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.getInt(offset + 6), // age
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pictureUrl
            cursor.getInt(offset + 8), // followingNum
            cursor.getInt(offset + 9), // fansNum
            cursor.getInt(offset + 10), // momentsNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // dateCheckString
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassWord(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeight(cursor.getDouble(offset + 3));
        entity.setWeight(cursor.getDouble(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.getInt(offset + 6));
        entity.setPictureUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFollowingNum(cursor.getInt(offset + 8));
        entity.setFansNum(cursor.getInt(offset + 9));
        entity.setMomentsNum(cursor.getInt(offset + 10));
        entity.setDateCheckString(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
